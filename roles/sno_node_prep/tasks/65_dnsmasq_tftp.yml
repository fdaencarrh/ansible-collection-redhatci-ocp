---
- name: Set the tftp server name
  ansible.builtin.set_fact:
    tftp_server: "{{ groups['tftp_host'] is defined | ternary(groups['tftp_host'][0], groups['provisioner'][0]) }}"
  tags: tftp

- name: "Delegate tasks to tftp_server"
  become: true
  delegate_to: "{{ tftp_server }}"
  tags:
    - tftp
  block:
    - name: "Install packages to boostrap SNO baremetal"
      ansible.builtin.yum:
        name: "{{ snobm_pkg_list }}"
        state: present
        update_cache: true
        disable_gpg_check: true
      tags:
        - packages
        - tftp

    - name: "Create TFTP directory"
      ansible.builtin.file:
        path: "{{ tftp_dir }}"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
        setype: tftpdir_rw_t

    - name: "Collect efi files"
      ansible.builtin.find:
        paths: /boot/efi/EFI/
        recurse: true
        patterns: "*.efi,*.EFI"
      register: efi_files

    - name: "Copy EFI files"  # noqa: risky-file-permissions
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item.path }}"
        dest: "{{ tftp_dir }}"
        setype: tftpdir_rw_t
      loop: "{{ efi_files.files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Define TFTP settings for dnsmasq
      ansible.builtin.template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.d/{{ cluster }}.conf
        owner: root
        group: root
        mode: u=rw,g=r,o=r

    - name: Restart dnsmasq
      ansible.builtin.service:
        name: dnsmasq
        state: restarted

    - name: "Create TFTP images directory"
      ansible.builtin.file:
        path: "{{ tftp_dir }}/images"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
        setype: tftpdir_rw_t

    - name: "Allow DHCP traffic"
      ansible.posix.firewalld:
        service: dhcp
        permanent: true
        immediate: true
        state: enabled
      when: firewall == "firewalld"

    - name: "Allow TFTP traffic"
      ansible.posix.firewalld:
        service: tftp
        permanent: true
        immediate: true
        state: enabled
      when: firewall == "firewalld"

    - name: "Allow DNS traffic"
      ansible.posix.firewalld:
        service: dns
        permanent: true
        immediate: true
        state: enabled
      when: firewall == "firewalld"
...
